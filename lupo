#!/usr/bin/bash

# ====================================================
# These are the commands that we are
# exposing to the person using Lupo.
# 
# They are delegated to their partner functions
# in the bottom section of this script.
# ----------------------------------------------------
declare -a commands=(init build index deploy)

# ====================================================
# This section enables the tab completion
# that is built into bash.
# 
# Just add `complete -C lupo lupo` to your .bashrc
# ----------------------------------------------------
if [[ -n $COMP_LINE ]]; then
    for c in "${commands[@]}"; do
        [[ ${c:0:${#2}} == "${2,,}" ]] && echo "$c"
    done
    exit
fi

# ====================================================
# Directory path constants.
# ----------------------------------------------------
declare LUPO_DIRECTORY="$PWD"
declare CONFIG_FILE=$LUPO_DIRECTORY/.config
declare SRC_DIRECTORY="$LUPO_DIRECTORY/src"
declare HTML_DIRECTORY="$LUPO_DIRECTORY/html"
declare TMP_DIRECTORY="$LUPO_DIRECTORY/.tmp"
declare TEMPLATES_DIRECTORY="$LUPO_DIRECTORY/templates"

# ====================================================
# Variables that can be set in your `.config` file.
# e.g.:
# remote_user: "myuser"
# site_title: "My Website"
# ----------------------------------------------------
declare remote_user=""
declare site_title=""
declare ssh_identity_key=""
declare domain_name=""
declare remote_directory=""

# ====================================================
# Parse the configuration file `.config` 
# into variables of the same name. 
# These are declared above.
# ----------------------------------------------------
_parse_configuration() {
    readarray -t lines < "$LUPO_DIRECTORY/.config"
    for line in "${lines[@]}"; do
        [[ -z "$line" ]] && continue
        readarray -d ":" config_line <<< "$line"
        
        key="${config_line[0]/:/}"
        value="${config_line[1]//\"/}"
        value="${value## }"
        value="${value//$'\n'}"

        case $key in
            site_title) site_title="$value";;
            remote_user) remote_user="$value";;
            ssh_identity_key) ssh_identity_key="$value";;
            domain_name) domain_name="$value";;
            remote_directory) remote_directory="$value";;
        esac

    done 
}

# ====================================================
# Delete and remake and existing directory.
# ----------------------------------------------------
_refresh_dir() {
    if [[ -d $1 ]]; then
        rm -rf "$1"
    fi
    mkdir -p "$1"
}

# ====================================================
# Delete and remake a file with optional 
# second argument for file content.
# ----------------------------------------------------
_refresh_file() {
    if [[ -e "$1" ]]; then
        rm "$1"
    fi
    touch "$1"
    echo -e "${2:-}" > "$1"
}

# ====================================================
# Remake the template file for exporting variables 
# from markdown file to this script.
# ----------------------------------------------------
_refresh_vars_template_file() {
    string=""
    string+="#!/usr/bin/bash\n"
    string+="export title=\"\$title\$\"\n"    
    string+="\$if(tags)\$\n"
    string+="export tags=\"\$for(tags)\$\$tags\$\$sep\$,\$endfor\$\"\n"
    string+="\$endif\$\n"

    _refresh_file "$TMP_DIRECTORY/.vars.template.bash" "$string"

}

# ====================================================
# Create a directory if it doesn't already exist.
# ----------------------------------------------------
_create_dir_if_not_exists() {
    if [[ ! -d $1 ]]; then
        mkdir -p "$1"
    fi
}

# ====================================================
# Create a file if it doesn't already exist.
# ----------------------------------------------------
_create_file_if_not_exists() {
    if [[ ! -f $1 ]]; then
        touch "$1"
    fi
}

# ====================================================
# Work out the tag name from the full
# path to the tag markdown file.
# ----------------------------------------------------
_determineTagName() {
    tag="${1##"$TMP_DIRECTORY"/tags/}"
    readarray -d "/" tagarray <<< "$tag"
    tag="${tagarray[0]/"-"/" "/}"
    tag="${tag^}"
    echo "${tag[0]%%/}"
}

_get_target_file_path_from_src_file_path() {
    target_file_path="${1##"$2"}"
    target_file_path="${target_file_path%%md}"
    target_file_path="$target_file_path"html
    echo "$HTML_DIRECTORY$target_file_path"
}

_get_uri_from_src_file() {
    filepath=${1##"$SRC_DIRECTORY"}
    echo "${filepath%%index.md}"
}

# ====================================================
# Create the frontmatter metadata from the
# contents of the yaml filepath given.
# ----------------------------------------------------
_build_frontmatter() {
    tag_name=$(_determineTagName "$1")
    readarray -d ";" -t posts < "$1"

    frontmatter="---\n"
    frontmatter+="title: $tag_name tag Page\n"
    frontmatter+="posts:\n"

    for post in "${posts[@]}"; do
        mapfile -t post <<< "$post"

        for line in "${post[@]}"; do
            if [[ -z $line ]]; then
                continue
            fi
            if [[ "${line:0:6}" == "title:" ]]; then
                frontmatter+="      - $line\n"
            else
                frontmatter+="        $line\n"
            fi
        done
    done

    frontmatter+="---\n\n"
    frontmatter+="this is the $tag_name content"
    echo "$frontmatter"
}

# ====================================================
# Confirm that all required files and folders exist.
# ----------------------------------------------------
_confirm_init_ran() {
    for folder in src html templates .tmp; do
        if [[ ! -d "$LUPO_DIRECTORY/$folder" ]]; then
            echo "Missing directories. Please initialize your project with lupo init" && exit 1
        fi
    done
}

# ====================================================
# initialization function to make the 
# current folder into a "Lupo" project.
# ----------------------------------------------------
_init() {
    _create_dir_if_not_exists "$SRC_DIRECTORY"
    _create_dir_if_not_exists "$HTML_DIRECTORY"
    _create_dir_if_not_exists "$TEMPLATES_DIRECTORY"
    _create_dir_if_not_exists "$TMP_DIRECTORY"
    _create_file_if_not_exists "$CONFIG_FILE"
}

# ====================================================
# Create all of the required "index"-like pages.
# e.g. paginated blog roll; paginated tags pages.
# ----------------------------------------------------
_index() {
    clear
    echo -e "Indexing website now\n"
    sleep 0.5

    _refresh_dir "$TMP_DIRECTORY"
    _refresh_dir "$TMP_DIRECTORY/tags/"
    _refresh_file "$TMP_DIRECTORY/all.yml"
    _refresh_vars_template_file

    posts_per_page=10
    count=0
    current_page=1

    declare -A tags_array=()

    while IFS="" read -r src_file; do
        
        uri=$(_get_uri_from_src_file "$src_file")

        count=$((count+1))

        if [[ $count -gt $posts_per_page ]]; then
            count=1
            current_page=$((current_page+1))
        fi

        pandoc -s "$src_file" -o "$TMP_DIRECTORY/.vars.bash" --template="$TMP_DIRECTORY/.vars.template.bash" 2> /dev/null

        [[ ! -e $TMP_DIRECTORY/.vars.bash ]] && exit 1

        source "$TMP_DIRECTORY/.vars.bash"

        dir="${src_file%%index.md}"
        _refresh_file "$dir/fallbacks.yml"
        echo -e "---\nmetadata:\n  title_fallback: FROM FILE" >> "$dir/fallbacks.yml"

        _create_dir_if_not_exists "$TMP_DIRECTORY/$current_page"
        _create_file_if_not_exists "$TMP_DIRECTORY/$current_page/index.yml"

        for field in title uri date; do
            if [[ -n "${!field}" ]]; then
                echo -e "$field: ${!field}\n" >> "$TMP_DIRECTORY/$current_page/index.yml"
            fi
        done
        echo -e ";\n" >> "$TMP_DIRECTORY/$current_page/index.yml"

        IFS=',' read -r -a tags <<< "$tags"

        for tag in "${tags[@]}"; do
            if [[ -z ${tags_array["$tag"_count]} ]]; then
                tags_array["$tag"_count]=1
            fi

            if  (( tags_array["$tag"_count] > posts_per_page )) ; then
                tags_array["$tag"_count]=$((tags_array["$tag"_count]+1))
                tags_array["$tag"_current_page]=$((tags_array["$tag"_current_page]+1))
            fi

            if [[ -z "${tags_array["$tag"_current_page]}" ]]; then
                tags_array["$tag"_current_page]=1
            fi
            
            _create_dir_if_not_exists "$TMP_DIRECTORY/tags/$tag/${tags_array["$tag"_current_page]}"
            _create_file_if_not_exists "$TMP_DIRECTORY/tags/$tag/${tags_array["$tag"_current_page]}/index.yml"

            for field in title uri date; do
                if [[ -n "${!field}" ]]; then
                    echo -e "$field: ${!field}\n" >> "$TMP_DIRECTORY/tags/$tag/${tags_array["$tag"_current_page]}/index.yml"
                fi
            done
            echo -e ";\n" >> "$TMP_DIRECTORY/tags/$tag/${tags_array["$tag"_current_page]}/index.yml"
        done
        tags=()
        printf "."
    done < <(find "$SRC_DIRECTORY" -iname "*.md" -type f)

    while IFS="" read -r filename; do
        frontmatter=$(_build_frontmatter "$filename")
        _refresh_file "${filename/".yml"/".md"}" "$frontmatter" 
    done < <(find "$TMP_DIRECTORY/tags/" -iname "*.yml" -type f)

    echo -e "Finshed indexng\n\n"
    sleep 0.5
}

# ====================================================
# Build the website from the markdown files.
# Firstly the Lupo-generated files in the 
# `.tmp` directory, followed by the 
# owner's original pages and posts.
# ----------------------------------------------------
_build() {
    
    # _index

    echo -e "Building tag source files.\n"

    while IFS="" read -r src_file; do
        target_file_path=$(_get_target_file_path_from_src_file_path "$src_file" "$TMP_DIRECTORY")

        _create_dir_if_not_exists "$(dirname "$target_file_path")"

        pandoc -s "$src_file" -t 'html' -o "$target_file_path" --template="$TEMPLATES_DIRECTORY/tags.template.html"

        printf "."

    done <  <(find "$TMP_DIRECTORY/tags" -iname "*.md" -type f)

    echo -e "\nBuilding website\n"

    while IFS="" read -r src_file; do
        target_file_path=$(_get_target_file_path_from_src_file_path "$src_file" "$SRC_DIRECTORY")

        _create_dir_if_not_exists "$(dirname "$target_file_path")"

        src_directory=$(dirname "$src_file")

        if [[ ${src_file##*.} == "md" ]]; then
            pandoc -s "$src_file" -t 'html' -o "$target_file_with_full_path" --template="$TEMPLATES_DIRECTORY/post.template.html" --defaults="$src_directory/fallbacks.yml" 2> /dev/null
        elif [[ ${src_file##*.} == "yml" ]]; then
            continue
        else
            cp "$src_file" "$target_file_with_full_path"
        fi

        printf "."

    done <  <(find "$SRC_DIRECTORY" -iname "*" -type f)

    echo -e "\nBuild complete"
}

# ====================================================
# Deploy the `html` folder contents to a remote server.
# The variables of these should be set 
# in the project's `.config` file.
# ----------------------------------------------------
_deploy() {
    rsync -Paz --delete -e "ssh -l $remote_user -i $ssh_identity_key" "$HTML_DIRECTORY/" "$remote_user"@"$domain_name":"$remote_directory"
}

# ====================================================
# This area delegates functions to their implementation.
# It uses the $commands variable from the top
# to know which commands are allowed.
# 
# It then passes a "function" to a "_function" partner.
# ----------------------------------------------------
declare CMD="$1"; shift
for c in "${commands[@]}"; do

    _parse_configuration

    if [[ $c != 'init' ]]; then
        _confirm_init_ran
    fi
    
    [[ $c == "$CMD" ]] && "_$c" "$@" && exit $?
done

