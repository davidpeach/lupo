#!/usr/bin/bash

declare -a commands=(init build index)

if [[ -n $COMP_LINE ]]; then
    for c in "${commands[@]}"; do
        [[ ${c:0:${#2}} == "${2,,}" ]] && echo "$c"
    done
    exit
fi

declare LUPO_DIRECTORY="$PWD"
declare CONFIG_FILE=$LUPO_DIRECTORY/.config
declare SRC_DIRECTORY="$LUPO_DIRECTORY/src"
declare TMP_DIRECTORY="$LUPO_DIRECTORY/.tmp"
declare TEMPLATES_DIRECTORY="$LUPO_DIRECTORY/templates"

_init() {
    _create_dir_if_not_exists src
    _create_dir_if_not_exists html
    _create_dir_if_not_exists templates
    _create_dir_if_not_exists .tmp
    _refresh_vars_template_file
    _create_file_if_not_exists .config
}

_index() {
    clear
    echo "Indexing website now"
    sleep 0.5

    _refresh_dir "$TMP_DIRECTORY"
    _refresh_dir "$TMP_DIRECTORY/tags/"
    _refresh_file "$TMP_DIRECTORY/all.yml"

    posts_per_page=10
    count=0
    current_page=1

    declare -A tags_array=()

    while IFS="" read -r src_file; do
        count=$((count+1))
        if [[ $count -gt $posts_per_page ]]; then
            count=1
            current_page=$((current_page+1))
        fi

        pandoc -s "$src_file" -o "$TMP_DIRECTORY/.vars.bash" --template="$TMP_DIRECTORY/.vars.template.bash" 2> /dev/null

        [[ ! -e $TMP_DIRECTORY/.vars.bash ]] && exit 1

        source "$TMP_DIRECTORY/.vars.bash"

        dir="${src_file%%index.md}"
        _refresh_file "$dir/fallbacks.yml"
        echo -e "---\nmetadata:\n  title_fallback: FROM FILE" >> "$dir/fallbacks.yml"

        if [[ ! -d $TMP_DIRECTORY/$current_page ]]; then
            mkdir -p "$TMP_DIRECTORY/$current_page"
            touch "$TMP_DIRECTORY/$current_page/index.yml"
        fi

        for field in title uri published_at; do
            if [[ -n "${!field}" ]]; then
                echo -e "$field: ${!field}\n" >> "$TMP_DIRECTORY/$current_page/index.yml"
            fi
        done

        IFS=',' read -r -a tags <<< "$tags"

        for tag in "${tags[@]}"; do
            if [[ -z ${tags_array["$tag"_count]} ]]; then
                tags_array["$tag"_count]=1
            fi

            if  (( tags_array["$tag"_count] > posts_per_page )) ; then
                tags_array["$tag"_count]=$((tags_array["$tag"_count]+1))
                tags_array["$tag"_current_page]=$((tags_array["$tag"_current_page]+1))
            fi

            if [[ -z "${tags_array["$tag"_current_page]}" ]]; then
                tags_array["$tag"_current_page]=1
            fi
            
            if [[ ! -d "$TMP_DIRECTORY/tags/$tag/${tags_array["$tag"_current_page]}" ]]; then
                mkdir -p "$TMP_DIRECTORY/tags/$tag/${tags_array["$tag"_current_page]}"
                touch "$TMP_DIRECTORY/tags/$tag/${tags_array["$tag"_current_page]}/index.yml"
            fi

            for field in title uri published_at; do
                if [[ -n "${!field}" ]]; then
                    echo -e "$field: ${!field}\n" >> "$TMP_DIRECTORY/tags/$tag/${tags_array["$tag"_current_page]}/index.yml"
                fi
            done
        done
        tags=()
        printf "."
    done < <(find "$SRC_DIRECTORY" -iname "*.md" -type f)

    while IFS="" read -r filename; do
        frontmatter=$(_build_frontmatter "$filename")
        _refresh_file "${filename/".yml"/".md"}" "$frontmatter" 
    done < <(find "$TMP_DIRECTORY/tags/" -iname "*.yml" -type f)

    echo "FINISHED"
}

_build() {
    
    _index

    local new_file_paths=""
    local first_loop=true

    while IFS="" read -r data; do
        # @todo string PWD off front and more intelligently swap "src" for "html"
        target_file_with_full_path=${data//".tmp"/"html"}
        # @todo only the "md" at the end of the file path.
        target_file_with_full_path=${target_file_with_full_path//"md"/"html"}

        target_directory=$(dirname "$target_file_with_full_path")

        if [[ ! -d $target_directory ]]; then
            (mkdir -p "$target_directory")
        fi

        pandoc -s "$data" -t 'html' -o "$target_file_with_full_path" --template="$TEMPLATES_DIRECTORY/tags.template.html"

    done <  <(find "$TMP_DIRECTORY/tags" -iname "*.md" -type f)

    while IFS="" read -r data; do
        # @todo string PWD off front and more intelligently swap "src" for "html"
        target_file_with_full_path=${data//"src"/"html"}

        src_directory=$(dirname "$data")

        # @todo only the "md" at the end of the file path.
        target_file_with_full_path=${target_file_with_full_path//"md"/"html"}

        target_directory=$(dirname "$target_file_with_full_path")

        if [[ ! -d $target_directory ]]; then
            (mkdir -p "$target_directory")
        fi

        if [[ ${data##*.} == "md" ]]; then
            pandoc -s "$data" -t 'html' -o "$target_file_with_full_path" --template="$TEMPLATES_DIRECTORY/post.template.html" --defaults="$src_directory/fallbacks.yml"
        elif [[ ${data##*.} == "yml" ]]; then
            echo "Yaml file skipped."
            continue
        else
            cp "$data" "$target_file_with_full_path"
        fi

        echo "$target_file_with_full_path"; 

        if [[ $first_loop == false ]]; then
            new_file_paths+="\n"
        fi

        new_file_paths+="$data"
        first_loop=false
    done <  <(find "$SRC_DIRECTORY" -iname "*" -type f)
}

declare CMD="$1"; shift
for c in "${commands[@]}"; do
    if [[ $c != 'init' ]]; then
        _confirm_init_ran
    fi
    
    [[ $c == "$CMD" ]] && "_$c" "$@" && exit $?
done

_refresh_dir() {
    if [[ -d $1 ]]; then
        rm -rf "$1"
    fi
    mkdir -p "$1"
}

_refresh_file() {
    if [[ -e "$1" ]]; then
        rm "$1"
    fi
    touch "$1"
    echo -e "${2:-}" > "$1"
}

_refresh_vars_template_file() {
    string=""
    string+="#!/usr/bin/bash\n"
    string+="export title=\"\$title\$\"\n"    
    string+="\$if(tags)\$\n"
    string+="export tags=\"\$for(tags)\$\$tags\$\$sep\$,\$endfor\$\"\n"
    string+="\$endif\$\n"

    _refresh_file "$TMP_DIRECTORY/.vars.template.bash" "$string"

}

_create_dir_if_not_exists() {
    if [[ ! -d $LUPO_DIRECTORY/$1 ]]; then
        mkdir -p "$LUPO_DIRECTORY/$1"
    fi
}

_create_file_if_not_exists() {
    if [[ ! -f $1 ]]; then
        touch "$1"
    fi
}

_determineTagName() {
    tag="${1##"$TMP_DIRECTORY"/tags/}"
    readarray -d "/" tagarray <<< "$tag"
    tag="${tagarray[0]/"-"/" "/}"
    tag="${tag^}"
    echo "${tag[0]%%/}"
}

_build_frontmatter() {
    tag_name=$(_determineTagName "$1")
    readarray -d ";" -t posts < "$1"

    frontmatter="---\n"
    frontmatter+="title: $tag_name tag Page\n"
    frontmatter+="posts:\n"

    for post in "${posts[@]}"; do
        mapfile -t post <<< "$post"

        for line in "${post[@]}"; do
            if [[ -z $line ]]; then
                continue
            fi
            if [[ "${line:0:6}" == "title:" ]]; then
                frontmatter+="      - $line\n"
            else
                frontmatter+="        $line\n"
            fi
        done
    done

    frontmatter+="---\n\n"
    frontmatter+="this is the $tag_name content"
    echo "$frontmatter"
}

_confirm_init_ran() {
    for folder in src html templates .tmp; do
        if [[ ! -d "$LUPO_DIRECTORY/$folder" ]]; then
            echo "Missing directories. Please initialize your project with lupo init" && exit 1
        fi
    done
}
