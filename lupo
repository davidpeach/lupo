#!/usr/bin/bash

declare -a commands=(init build index)

if [[ -n $COMP_LINE ]]; then
    for c in "${commands[@]}"; do
        [[ ${c:0:${#2}} == "${2,,}" ]] && echo "$c"
    done
    exit
fi

declare LUPO_DIRECTORY="$PWD"
declare SRC_DIRECTORY="$PWD/src"
declare CONFIG_DIRECTORY="$PWD/.config"
declare TMP_DIRECTORY="$PWD/.tmp"
declare TEMPLATES_DIRECTORY="$PWD/.templates"

_confirm_init_ran() {
    for folder in src html .config .templates .tmp; do
        if [[ ! -d "$LUPO_DIRECTORY/$folder" ]]; then
            echo "Missing directories. Please initialize your project with lupo init" && exit 1
        fi
    done
}

_refresh_dir() {
    if [[ -d $1 ]]; then
        rm -rf "$1"
    fi
    mkdir -p "$1"
}

_refresh_file() {
    if [[ -e "$1" ]]; then
        rm "$1"
    fi
    touch "$1"
    echo -e "${2:-}" > "$1"
}

_refresh_vars_template_file() {
    string=""
    string+="#!/usr/bin/bash\n"
    string+="export title=\"\$title\$\"\n"    
    string+="\$if(tags)\$\n"
    string+="export tags=\"\$for(tags)\$\$tags\$\$sep\$,\$endfor\$\"\n"
    string+="\$endif\$\n"

    _refresh_file "$CONFIG_DIRECTORY/.vars.template.bash" "$string"

}

_create_dir_if_not_exists() {
    if [[ ! -d $LUPO_DIRECTORY/$1 ]]; then
        mkdir -p "$LUPO_DIRECTORY/$1"
    fi
}

_init() {
    _create_dir_if_not_exists src
    _create_dir_if_not_exists html
    _create_dir_if_not_exists .templates
    _create_dir_if_not_exists .config
    _create_dir_if_not_exists .tmp
    _refresh_vars_template_file
}

_index() {
    clear
    echo "Indexing website now"
    sleep 0.5

    _refresh_dir "$TMP_DIRECTORY/tags/"
    _refresh_file "$TMP_DIRECTORY/all.yml"

    while IFS="" read -r src_file; do
        filepath=${src_file##"$SRC_DIRECTORY"}
        uri="${filepath%%index.md}"

        pandoc -s "$src_file" -o "$TMP_DIRECTORY/.vars.bash" --template="$CONFIG_DIRECTORY/.vars.template.bash" 2> /dev/null

        [[ ! -e $TMP_DIRECTORY/.vars.bash ]] && exit 1

        source "$TMP_DIRECTORY/.vars.bash"

        {
            echo -e "title: $title\n"   
            echo -e "uri: $uri\n"
            echo -e "published_at: 25th December 1997\n"
            echo -e ";\n"
        } >> "$LUPO_DIRECTORY/all.yml" 

        IFS=', ' read -r -a tags <<< "$tags"
        for tag in "${tags[@]}"; do
            if [[ ! -e "$TMP_DIRECTORY/tags/$tag.yml" ]]; then
                touch "$TMP_DIRECTORY/tags/$tag.yml"
            fi

            {
                echo -e "title: $title\n"
                echo -e "uri: $uri\n"
                echo -e "published_at: 25th December 1997\n"
                echo -e ";\n"
            } >> "$TMP_DIRECTORY/tags/$tag.yml"
        done
        tags=()
        printf "."
    done < <(find "$SRC_DIRECTORY" -iname "*.md" -type f)

    while IFS="" read -r filename; do
        tag="${filename%.yml}"
        readarray -d ";" -t posts < "$TMP_DIRECTORY/tags/$filename"
        frontmatter="---\n"
        frontmatter+="title: Tags Page\n"
        frontmatter+="posts:\n"
        for post in "${posts[@]}"; do
            mapfile -t post <<< "$post"

            for line in "${post[@]}"; do
                if [[ -z $line ]]; then
                    continue
                fi
                if [[ "${line:0:6}" == "title:" ]]; then
                    frontmatter+="      - $line\n"
                else
                    frontmatter+="        $line\n"
                fi
            done
        done

        frontmatter+="---\n\n"
        frontmatter+="this is the $tag content"
        touch "$TMP_DIRECTORY/tags/$tag.md"
        echo -e "$frontmatter" > "$TMP_DIRECTORY/tags/$tag.md"

    done < <(ls "$TMP_DIRECTORY/tags/")
    echo "FINISHED"
}

_build() {
    
    _index

    local new_file_paths=""
    local first_loop=true

    while IFS="" read -r data; do
        # @todo string PWD off front and more intelligently swap "src" for "html"
        target_file_with_full_path=${data//".tmp"/"html"}

        # @todo only the "md" at the end of the file path.
        target_file_with_full_path=${target_file_with_full_path//"md"/"html"}

        target_directory=$(dirname "$target_file_with_full_path")

        if [[ ! -d $target_directory ]]; then
            (mkdir -p "$target_directory")
        fi

        pandoc -s "$data" -t 'html' -o "$target_file_with_full_path" --template="$TEMPLATES_DIRECTORY/tags.template.html"

    done <  <(find "$TMP_DIRECTORY/tags" -iname "*.md" -type f)

    while IFS="" read -r data; do
        # @todo string PWD off front and more intelligently swap "src" for "html"
        target_file_with_full_path=${data//"src"/"html"}

        # @todo only the "md" at the end of the file path.
        target_file_with_full_path=${target_file_with_full_path//"md"/"html"}

        target_directory=$(dirname "$target_file_with_full_path")

        if [[ ! -d $target_directory ]]; then
            (mkdir -p "$target_directory")
        fi

        if [[ ${data##*.} == "md" ]]; then
            pandoc -s "$data" -t 'html' -o "$target_file_with_full_path" --template="$TEMPLATES_DIRECTORY/post.template.html"
        else
            cp "$data" "$target_file_with_full_path"
        fi

        echo "$target_file_with_full_path"; 

        if [[ $first_loop == false ]]; then
            new_file_paths+="\n"
        fi

        new_file_paths+="$data"
        first_loop=false
    done <  <(find "$SRC_DIRECTORY" -iname "*" -type f)
}

declare CMD="$1"; shift
for c in "${commands[@]}"; do
    if [[ $c != 'init' ]]; then
        _confirm_init_ran
    fi
    
    [[ $c == "$CMD" ]] && "_$c" "$@" && exit $?
done
